// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v2.3.0-wicked-fork
// source: query.sql

package tasks

import (
	"context"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"sync"
	"time"

	constants "github.com/galxe/spotted-network/pkg/operator/constants"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/rs/zerolog/log"
)

const cleanupOldTasks = `-- name: CleanupOldTasks :exec
DELETE FROM tasks
WHERE created_at < NOW() - INTERVAL '24 hours'
AND status IN ('completed')
`

// -- timeout: 5s
func (q *Queries) CleanupOldTasks(ctx context.Context) error {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*5000)
	defer cancel()
	_, err := q.db.WExec(qctx, "tasks.CleanupOldTasks", cleanupOldTasks)
	if err != nil {
		return err
	}

	return nil
}

const createTask = `-- name: CreateTask :one

INSERT INTO tasks (
    task_id,
    target_address,
    chain_id,
    block_number,
    epoch,
    key,
    value,
    status,
    required_confirmations
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING task_id, chain_id, target_address, key, block_number, value, epoch, status, required_confirmations, retry_count, created_at, updated_at
`

type CreateTaskParams struct {
	TaskID                string               `json:"task_id"`
	TargetAddress         string               `json:"target_address"`
	ChainID               uint32               `json:"chain_id"`
	BlockNumber           uint64               `json:"block_number"`
	Epoch                 uint32               `json:"epoch"`
	Key                   pgtype.Numeric       `json:"key"`
	Value                 pgtype.Numeric       `json:"value"`
	Status                constants.TaskStatus `json:"status"`
	RequiredConfirmations uint16               `json:"required_confirmations"`
}

// -- timeout: 500ms
func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (*Tasks, error) {
	return _CreateTask(ctx, q.AsReadOnly(), arg)
}

func _CreateTask(ctx context.Context, q CacheQuerierConn, arg CreateTaskParams) (*Tasks, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	row := q.GetConn().WQueryRow(qctx, "tasks.CreateTask", createTask,
		arg.TaskID,
		arg.TargetAddress,
		arg.ChainID,
		arg.BlockNumber,
		arg.Epoch,
		arg.Key,
		arg.Value,
		arg.Status,
		arg.RequiredConfirmations)
	var i *Tasks = new(Tasks)
	err := row.Scan(
		&i.TaskID,
		&i.ChainID,
		&i.TargetAddress,
		&i.Key,
		&i.BlockNumber,
		&i.Value,
		&i.Epoch,
		&i.Status,
		&i.RequiredConfirmations,
		&i.RetryCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	if err == pgx.ErrNoRows {
		return (*Tasks)(nil), nil
	} else if err != nil {
		return nil, err
	}

	return i, err
}

const deleteTaskByID = `-- name: DeleteTaskByID :exec
DELETE FROM tasks
WHERE task_id = $1
`

// -- timeout: 500ms
func (q *Queries) DeleteTaskByID(ctx context.Context, taskID string) error {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	_, err := q.db.WExec(qctx, "tasks.DeleteTaskByID", deleteTaskByID, taskID)
	if err != nil {
		return err
	}

	return nil
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT task_id, chain_id, target_address, key, block_number, value, epoch, status, required_confirmations, retry_count, created_at, updated_at FROM tasks
WHERE task_id = $1
`

// -- timeout: 500ms
func (q *Queries) GetTaskByID(ctx context.Context, taskID string) (*Tasks, error) {
	return _GetTaskByID(ctx, q.AsReadOnly(), taskID)
}

func (q *ReadOnlyQueries) GetTaskByID(ctx context.Context, taskID string) (*Tasks, error) {
	return _GetTaskByID(ctx, q, taskID)
}

func _GetTaskByID(ctx context.Context, q CacheQuerierConn, taskID string) (*Tasks, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	q.GetConn().CountIntent("tasks.GetTaskByID")
	row := q.GetConn().WQueryRow(qctx, "tasks.GetTaskByID", getTaskByID, taskID)
	var i *Tasks = new(Tasks)
	err := row.Scan(
		&i.TaskID,
		&i.ChainID,
		&i.TargetAddress,
		&i.Key,
		&i.BlockNumber,
		&i.Value,
		&i.Epoch,
		&i.Status,
		&i.RequiredConfirmations,
		&i.RetryCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	if err == pgx.ErrNoRows {
		return (*Tasks)(nil), nil
	} else if err != nil {
		return nil, err
	}

	return i, err
}

const incrementRetryCount = `-- name: IncrementRetryCount :one
UPDATE tasks
SET retry_count = retry_count + 1,
    updated_at = NOW()
WHERE task_id = $1
RETURNING task_id, chain_id, target_address, key, block_number, value, epoch, status, required_confirmations, retry_count, created_at, updated_at
`

// -- timeout: 500ms
func (q *Queries) IncrementRetryCount(ctx context.Context, taskID string) (*Tasks, error) {
	return _IncrementRetryCount(ctx, q.AsReadOnly(), taskID)
}

func _IncrementRetryCount(ctx context.Context, q CacheQuerierConn, taskID string) (*Tasks, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	row := q.GetConn().WQueryRow(qctx, "tasks.IncrementRetryCount", incrementRetryCount, taskID)
	var i *Tasks = new(Tasks)
	err := row.Scan(
		&i.TaskID,
		&i.ChainID,
		&i.TargetAddress,
		&i.Key,
		&i.BlockNumber,
		&i.Value,
		&i.Epoch,
		&i.Status,
		&i.RequiredConfirmations,
		&i.RetryCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	if err == pgx.ErrNoRows {
		return (*Tasks)(nil), nil
	} else if err != nil {
		return nil, err
	}

	return i, err
}

const listAllTasks = `-- name: ListAllTasks :many
SELECT task_id, chain_id, target_address, key, block_number, value, epoch, status, required_confirmations, retry_count, created_at, updated_at FROM tasks 
ORDER BY created_at DESC
`

// -- timeout: 500ms
func (q *Queries) ListAllTasks(ctx context.Context) ([]Tasks, error) {
	return _ListAllTasks(ctx, q.AsReadOnly())
}

func (q *ReadOnlyQueries) ListAllTasks(ctx context.Context) ([]Tasks, error) {
	return _ListAllTasks(ctx, q)
}

func _ListAllTasks(ctx context.Context, q CacheQuerierConn) ([]Tasks, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	q.GetConn().CountIntent("tasks.ListAllTasks")
	rows, err := q.GetConn().WQuery(qctx, "tasks.ListAllTasks", listAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i *Tasks = new(Tasks)
		if err := rows.Scan(
			&i.TaskID,
			&i.ChainID,
			&i.TargetAddress,
			&i.Key,
			&i.BlockNumber,
			&i.Value,
			&i.Epoch,
			&i.Status,
			&i.RequiredConfirmations,
			&i.RetryCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, *i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return items, err
}

const listConfirmingTasks = `-- name: ListConfirmingTasks :many
SELECT task_id, chain_id, target_address, key, block_number, value, epoch, status, required_confirmations, retry_count, created_at, updated_at FROM tasks 
WHERE status = 'confirming'
ORDER BY created_at DESC
`

// -- timeout: 500ms
func (q *Queries) ListConfirmingTasks(ctx context.Context) ([]Tasks, error) {
	return _ListConfirmingTasks(ctx, q.AsReadOnly())
}

func (q *ReadOnlyQueries) ListConfirmingTasks(ctx context.Context) ([]Tasks, error) {
	return _ListConfirmingTasks(ctx, q)
}

func _ListConfirmingTasks(ctx context.Context, q CacheQuerierConn) ([]Tasks, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	q.GetConn().CountIntent("tasks.ListConfirmingTasks")
	rows, err := q.GetConn().WQuery(qctx, "tasks.ListConfirmingTasks", listConfirmingTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i *Tasks = new(Tasks)
		if err := rows.Scan(
			&i.TaskID,
			&i.ChainID,
			&i.TargetAddress,
			&i.Key,
			&i.BlockNumber,
			&i.Value,
			&i.Epoch,
			&i.Status,
			&i.RequiredConfirmations,
			&i.RetryCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, *i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return items, err
}

const listPendingTasks = `-- name: ListPendingTasks :many
SELECT task_id, chain_id, target_address, key, block_number, value, epoch, status, required_confirmations, retry_count, created_at, updated_at FROM tasks
WHERE status = 'pending'
ORDER BY created_at ASC
`

// -- timeout: 500ms
func (q *Queries) ListPendingTasks(ctx context.Context) ([]Tasks, error) {
	return _ListPendingTasks(ctx, q.AsReadOnly())
}

func (q *ReadOnlyQueries) ListPendingTasks(ctx context.Context) ([]Tasks, error) {
	return _ListPendingTasks(ctx, q)
}

func _ListPendingTasks(ctx context.Context, q CacheQuerierConn) ([]Tasks, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	q.GetConn().CountIntent("tasks.ListPendingTasks")
	rows, err := q.GetConn().WQuery(qctx, "tasks.ListPendingTasks", listPendingTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i *Tasks = new(Tasks)
		if err := rows.Scan(
			&i.TaskID,
			&i.ChainID,
			&i.TargetAddress,
			&i.Key,
			&i.BlockNumber,
			&i.Value,
			&i.Epoch,
			&i.Status,
			&i.RequiredConfirmations,
			&i.RetryCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, *i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return items, err
}

const updateTaskToCompleted = `-- name: UpdateTaskToCompleted :exec
UPDATE tasks
SET status = 'completed',
    updated_at = NOW()
WHERE task_id = $1
`

// -- timeout: 500ms
func (q *Queries) UpdateTaskToCompleted(ctx context.Context, taskID string) error {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	_, err := q.db.WExec(qctx, "tasks.UpdateTaskToCompleted", updateTaskToCompleted, taskID)
	if err != nil {
		return err
	}

	return nil
}

const updateTaskToPending = `-- name: UpdateTaskToPending :exec
UPDATE tasks 
SET status = 'pending', 
    updated_at = NOW()
WHERE task_id = $1
`

// -- timeout: 500ms
func (q *Queries) UpdateTaskToPending(ctx context.Context, taskID string) error {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	_, err := q.db.WExec(qctx, "tasks.UpdateTaskToPending", updateTaskToPending, taskID)
	if err != nil {
		return err
	}

	return nil
}

//// auto generated functions

func (q *Queries) Dump(ctx context.Context, beforeDump ...BeforeDump) ([]byte, error) {
	sql := "SELECT task_id,chain_id,target_address,key,block_number,value,epoch,status,required_confirmations,retry_count,created_at,updated_at FROM \"tasks\" ORDER BY task_id,target_address,created_at,updated_at ASC;"
	rows, err := q.db.WQuery(ctx, "tasks.Dump", sql)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var v Tasks
		if err := rows.Scan(&v.TaskID, &v.ChainID, &v.TargetAddress, &v.Key, &v.BlockNumber, &v.Value, &v.Epoch, &v.Status, &v.RequiredConfirmations, &v.RetryCount, &v.CreatedAt, &v.UpdatedAt); err != nil {
			return nil, err
		}
		for _, applyBeforeDump := range beforeDump {
			applyBeforeDump(&v)
		}
		items = append(items, v)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	bytes, err := json.MarshalIndent(items, "", "  ")
	if err != nil {
		return nil, err
	}
	return bytes, nil
}

func (q *Queries) Load(ctx context.Context, data []byte) error {
	sql := "INSERT INTO \"tasks\" (task_id,chain_id,target_address,key,block_number,value,epoch,status,required_confirmations,retry_count,created_at,updated_at) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12);"
	rows := make([]Tasks, 0)
	err := json.Unmarshal(data, &rows)
	if err != nil {
		return err
	}
	for _, row := range rows {
		_, err := q.db.WExec(ctx, "tasks.Load", sql, row.TaskID, row.ChainID, row.TargetAddress, row.Key, row.BlockNumber, row.Value, row.Epoch, row.Status, row.RequiredConfirmations, row.RetryCount, row.CreatedAt, row.UpdatedAt)
		if err != nil {
			return err
		}
	}
	return nil
}

func hashIfLong(v string) string {
	if len(v) > 64 {
		hash := sha256.Sum256([]byte(v))
		return "h(" + hex.EncodeToString(hash[:]) + ")"
	}
	return v
}

func ptrStr[T any](v *T) string {
	if v == nil {
		return "<nil>"
	}
	return fmt.Sprintf("%+v", *v)
}

// eliminate unused error
var _ = log.Logger
var _ = fmt.Sprintf("")
var _ = time.Now()
var _ = json.RawMessage{}
var _ = sha256.Sum256(nil)
var _ = hex.EncodeToString(nil)
var _ = sync.WaitGroup{}
