// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package consensus_responses

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createConsensusResponse = `-- name: CreateConsensusResponse :one
INSERT INTO consensus_responses (
    task_id,
    epoch,
    value,
    block_number,
    chain_id,
    target_address,
    key,
    aggregated_signatures,
    operator_signatures,
    total_weight,
    consensus_reached_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, task_id, epoch, value, key, total_weight, chain_id, block_number, target_address, aggregated_signatures, operator_signatures, consensus_reached_at, created_at, updated_at
`

type CreateConsensusResponseParams struct {
	TaskID               string             `json:"task_id"`
	Epoch                uint32             `json:"epoch"`
	Value                pgtype.Numeric     `json:"value"`
	BlockNumber          uint64             `json:"block_number"`
	ChainID              uint32             `json:"chain_id"`
	TargetAddress        string             `json:"target_address"`
	Key                  pgtype.Numeric     `json:"key"`
	AggregatedSignatures []byte             `json:"aggregated_signatures"`
	OperatorSignatures   []byte             `json:"operator_signatures"`
	TotalWeight          pgtype.Numeric     `json:"total_weight"`
	ConsensusReachedAt   pgtype.Timestamptz `json:"consensus_reached_at"`
}

// -- invalidate: GetConsensusResponseByTaskId
// -- invalidate: GetConsensusResponseByRequest
func (q *Queries) CreateConsensusResponse(ctx context.Context, arg CreateConsensusResponseParams) (ConsensusResponse, error) {
	row := q.db.QueryRow(ctx, createConsensusResponse,
		arg.TaskID,
		arg.Epoch,
		arg.Value,
		arg.BlockNumber,
		arg.ChainID,
		arg.TargetAddress,
		arg.Key,
		arg.AggregatedSignatures,
		arg.OperatorSignatures,
		arg.TotalWeight,
		arg.ConsensusReachedAt,
	)
	var i ConsensusResponse
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Epoch,
		&i.Value,
		&i.Key,
		&i.TotalWeight,
		&i.ChainID,
		&i.BlockNumber,
		&i.TargetAddress,
		&i.AggregatedSignatures,
		&i.OperatorSignatures,
		&i.ConsensusReachedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConsensusResponseByRequest = `-- name: GetConsensusResponseByRequest :one
SELECT id, task_id, epoch, value, key, total_weight, chain_id, block_number, target_address, aggregated_signatures, operator_signatures, consensus_reached_at, created_at, updated_at FROM consensus_responses
WHERE target_address = $1 
AND chain_id = $2 
AND block_number = $3 
AND key = $4 
LIMIT 1
`

type GetConsensusResponseByRequestParams struct {
	TargetAddress string         `json:"target_address"`
	ChainID       uint32         `json:"chain_id"`
	BlockNumber   uint64         `json:"block_number"`
	Key           pgtype.Numeric `json:"key"`
}

// -- cache: 7d
func (q *Queries) GetConsensusResponseByRequest(ctx context.Context, arg GetConsensusResponseByRequestParams) (ConsensusResponse, error) {
	row := q.db.QueryRow(ctx, getConsensusResponseByRequest,
		arg.TargetAddress,
		arg.ChainID,
		arg.BlockNumber,
		arg.Key,
	)
	var i ConsensusResponse
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Epoch,
		&i.Value,
		&i.Key,
		&i.TotalWeight,
		&i.ChainID,
		&i.BlockNumber,
		&i.TargetAddress,
		&i.AggregatedSignatures,
		&i.OperatorSignatures,
		&i.ConsensusReachedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConsensusResponseByTaskId = `-- name: GetConsensusResponseByTaskId :one
SELECT id, task_id, epoch, value, key, total_weight, chain_id, block_number, target_address, aggregated_signatures, operator_signatures, consensus_reached_at, created_at, updated_at FROM consensus_responses
WHERE task_id = $1 LIMIT 1
`

// -- cache: 7d
func (q *Queries) GetConsensusResponseByTaskId(ctx context.Context, taskID string) (ConsensusResponse, error) {
	row := q.db.QueryRow(ctx, getConsensusResponseByTaskId, taskID)
	var i ConsensusResponse
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Epoch,
		&i.Value,
		&i.Key,
		&i.TotalWeight,
		&i.ChainID,
		&i.BlockNumber,
		&i.TargetAddress,
		&i.AggregatedSignatures,
		&i.OperatorSignatures,
		&i.ConsensusReachedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
