// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v2.3.0-wicked-fork
// source: query.sql

package consensus_responses

import (
	"context"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"sync"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/rs/zerolog/log"
)

const createConsensusResponse = `-- name: CreateConsensusResponse :one
INSERT INTO consensus_responses (
    task_id,
    epoch,
    value,
    block_number,
    chain_id,
    target_address,
    key,
    aggregated_signatures,
    operator_signatures,
    total_weight,
    consensus_reached_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, task_id, epoch, value, key, total_weight, chain_id, block_number, target_address, aggregated_signatures, operator_signatures, consensus_reached_at, created_at, updated_at
`

type CreateConsensusResponseParams struct {
	TaskID               string         `json:"task_id"`
	Epoch                uint32         `json:"epoch"`
	Value                pgtype.Numeric `json:"value"`
	BlockNumber          uint64         `json:"block_number"`
	ChainID              uint32         `json:"chain_id"`
	TargetAddress        string         `json:"target_address"`
	Key                  pgtype.Numeric `json:"key"`
	AggregatedSignatures []byte         `json:"aggregated_signatures"`
	OperatorSignatures   []byte         `json:"operator_signatures"`
	TotalWeight          pgtype.Numeric `json:"total_weight"`
	ConsensusReachedAt   *time.Time     `json:"consensus_reached_at"`
}

// -- invalidate: GetConsensusResponseByTaskId
// -- invalidate: GetConsensusResponseByRequest
// -- timeout: 500ms
func (q *Queries) CreateConsensusResponse(ctx context.Context, arg CreateConsensusResponseParams, getConsensusResponseByRequest *GetConsensusResponseByRequestParams) (*ConsensusResponse, error) {
	return _CreateConsensusResponse(ctx, q, arg, getConsensusResponseByRequest)
}

func _CreateConsensusResponse(ctx context.Context, q CacheWGConn, arg CreateConsensusResponseParams, getConsensusResponseByRequest *GetConsensusResponseByRequestParams) (*ConsensusResponse, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	row := q.GetConn().WQueryRow(qctx, "consensus_responses.CreateConsensusResponse", createConsensusResponse,
		arg.TaskID,
		arg.Epoch,
		arg.Value,
		arg.BlockNumber,
		arg.ChainID,
		arg.TargetAddress,
		arg.Key,
		arg.AggregatedSignatures,
		arg.OperatorSignatures,
		arg.TotalWeight,
		arg.ConsensusReachedAt)
	var i *ConsensusResponse = new(ConsensusResponse)
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Epoch,
		&i.Value,
		&i.Key,
		&i.TotalWeight,
		&i.ChainID,
		&i.BlockNumber,
		&i.TargetAddress,
		&i.AggregatedSignatures,
		&i.OperatorSignatures,
		&i.ConsensusReachedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	if err == pgx.ErrNoRows {
		return (*ConsensusResponse)(nil), nil
	} else if err != nil {
		return nil, err
	}

	// invalidate
	_ = q.GetConn().PostExec(func() error {
		anyErr := make(chan error, 1)
		var wg sync.WaitGroup
		wg.Add(1)
		go func() {
			defer wg.Done()
			if getConsensusResponseByRequest != nil {
				key := (*getConsensusResponseByRequest).CacheKey()
				err = q.GetCache().Invalidate(ctx, key)
				if err != nil {
					log.Ctx(ctx).Error().Err(err).Msgf(
						"Failed to invalidate: %s", key)
					anyErr <- err
				}
			}
		}()
		wg.Wait()
		close(anyErr)
		return <-anyErr
	})
	return i, err
}

const getConsensusResponseByRequest = `-- name: GetConsensusResponseByRequest :one
SELECT id, task_id, epoch, value, key, total_weight, chain_id, block_number, target_address, aggregated_signatures, operator_signatures, consensus_reached_at, created_at, updated_at FROM consensus_responses
WHERE target_address = $1 
AND chain_id = $2 
AND block_number = $3 
AND key = $4 
LIMIT 1
`

type GetConsensusResponseByRequestParams struct {
	TargetAddress string         `json:"target_address"`
	ChainID       uint32         `json:"chain_id"`
	BlockNumber   uint64         `json:"block_number"`
	Key           pgtype.Numeric `json:"key"`
}

// CacheKey - cache key
func (arg GetConsensusResponseByRequestParams) CacheKey() string {
	prefix := "consensus_responses:GetConsensusResponseByRequest:"
	return prefix + hashIfLong(fmt.Sprintf("%+v,%+v,%+v,%+v",
		arg.TargetAddress,
		arg.ChainID,
		arg.BlockNumber,
		arg.Key,
	))
}

// -- cache: 168h
// -- timeout: 500ms
func (q *Queries) GetConsensusResponseByRequest(ctx context.Context, arg GetConsensusResponseByRequestParams) (*ConsensusResponse, error) {
	return _GetConsensusResponseByRequest(ctx, q.AsReadOnly(), arg)
}

func (q *ReadOnlyQueries) GetConsensusResponseByRequest(ctx context.Context, arg GetConsensusResponseByRequestParams) (*ConsensusResponse, error) {
	return _GetConsensusResponseByRequest(ctx, q, arg)
}

func _GetConsensusResponseByRequest(ctx context.Context, q CacheQuerierConn, arg GetConsensusResponseByRequestParams) (*ConsensusResponse, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	q.GetConn().CountIntent("consensus_responses.GetConsensusResponseByRequest")
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 604800000)
		row := q.GetConn().WQueryRow(qctx, "consensus_responses.GetConsensusResponseByRequest", getConsensusResponseByRequest,
			arg.TargetAddress,
			arg.ChainID,
			arg.BlockNumber,
			arg.Key)
		var i *ConsensusResponse = new(ConsensusResponse)
		err := row.Scan(
			&i.ID,
			&i.TaskID,
			&i.Epoch,
			&i.Value,
			&i.Key,
			&i.TotalWeight,
			&i.ChainID,
			&i.BlockNumber,
			&i.TargetAddress,
			&i.AggregatedSignatures,
			&i.OperatorSignatures,
			&i.ConsensusReachedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if err == pgx.ErrNoRows {
			return (*ConsensusResponse)(nil), cacheDuration, nil
		}
		return i, cacheDuration, err
	}
	if q.GetCache() == nil {
		i, _, err := dbRead()
		return i.(*ConsensusResponse), err
	}

	var i *ConsensusResponse
	err := q.GetCache().GetWithTtl(qctx, arg.CacheKey(), &i, dbRead, false, false)
	if err != nil {
		return nil, err
	}

	return i, err
}

const getConsensusResponseByTaskId = `-- name: GetConsensusResponseByTaskId :one
SELECT id, task_id, epoch, value, key, total_weight, chain_id, block_number, target_address, aggregated_signatures, operator_signatures, consensus_reached_at, created_at, updated_at FROM consensus_responses
WHERE task_id = $1 LIMIT 1
`

// -- cache: 168h
// -- timeout: 500ms
func (q *Queries) GetConsensusResponseByTaskId(ctx context.Context, taskID string) (*ConsensusResponse, error) {
	return _GetConsensusResponseByTaskId(ctx, q.AsReadOnly(), taskID)
}

func (q *ReadOnlyQueries) GetConsensusResponseByTaskId(ctx context.Context, taskID string) (*ConsensusResponse, error) {
	return _GetConsensusResponseByTaskId(ctx, q, taskID)
}

func _GetConsensusResponseByTaskId(ctx context.Context, q CacheQuerierConn, taskID string) (*ConsensusResponse, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)
	defer cancel()
	q.GetConn().CountIntent("consensus_responses.GetConsensusResponseByTaskId")
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 604800000)
		row := q.GetConn().WQueryRow(qctx, "consensus_responses.GetConsensusResponseByTaskId", getConsensusResponseByTaskId, taskID)
		var i *ConsensusResponse = new(ConsensusResponse)
		err := row.Scan(
			&i.ID,
			&i.TaskID,
			&i.Epoch,
			&i.Value,
			&i.Key,
			&i.TotalWeight,
			&i.ChainID,
			&i.BlockNumber,
			&i.TargetAddress,
			&i.AggregatedSignatures,
			&i.OperatorSignatures,
			&i.ConsensusReachedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if err == pgx.ErrNoRows {
			return (*ConsensusResponse)(nil), cacheDuration, nil
		}
		return i, cacheDuration, err
	}
	if q.GetCache() == nil {
		i, _, err := dbRead()
		return i.(*ConsensusResponse), err
	}

	var i *ConsensusResponse
	err := q.GetCache().GetWithTtl(qctx, "consensus_responses:GetConsensusResponseByTaskId:"+hashIfLong(fmt.Sprintf("%+v", taskID)), &i, dbRead, false, false)
	if err != nil {
		return nil, err
	}

	return i, err
}

//// auto generated functions

func (q *Queries) Dump(ctx context.Context, beforeDump ...BeforeDump) ([]byte, error) {
	sql := "SELECT id,task_id,epoch,value,key,total_weight,chain_id,block_number,target_address,aggregated_signatures,operator_signatures,consensus_reached_at,created_at,updated_at FROM \"consensus_responses\" ORDER BY id,task_id,target_address,consensus_reached_at,created_at,updated_at ASC;"
	rows, err := q.db.WQuery(ctx, "consensus_responses.Dump", sql)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ConsensusResponse
	for rows.Next() {
		var v ConsensusResponse
		if err := rows.Scan(&v.ID, &v.TaskID, &v.Epoch, &v.Value, &v.Key, &v.TotalWeight, &v.ChainID, &v.BlockNumber, &v.TargetAddress, &v.AggregatedSignatures, &v.OperatorSignatures, &v.ConsensusReachedAt, &v.CreatedAt, &v.UpdatedAt); err != nil {
			return nil, err
		}
		for _, applyBeforeDump := range beforeDump {
			applyBeforeDump(&v)
		}
		items = append(items, v)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	bytes, err := json.MarshalIndent(items, "", "  ")
	if err != nil {
		return nil, err
	}
	return bytes, nil
}

func (q *Queries) Load(ctx context.Context, data []byte) error {
	sql := "INSERT INTO \"consensus_responses\" (id,task_id,epoch,value,key,total_weight,chain_id,block_number,target_address,aggregated_signatures,operator_signatures,consensus_reached_at,created_at,updated_at) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14);"
	rows := make([]ConsensusResponse, 0)
	err := json.Unmarshal(data, &rows)
	if err != nil {
		return err
	}
	for _, row := range rows {
		_, err := q.db.WExec(ctx, "consensus_responses.Load", sql, row.ID, row.TaskID, row.Epoch, row.Value, row.Key, row.TotalWeight, row.ChainID, row.BlockNumber, row.TargetAddress, row.AggregatedSignatures, row.OperatorSignatures, row.ConsensusReachedAt, row.CreatedAt, row.UpdatedAt)
		if err != nil {
			return err
		}
	}
	return nil
}

func hashIfLong(v string) string {
	if len(v) > 64 {
		hash := sha256.Sum256([]byte(v))
		return "h(" + hex.EncodeToString(hash[:]) + ")"
	}
	return v
}

func ptrStr[T any](v *T) string {
	if v == nil {
		return "<nil>"
	}
	return fmt.Sprintf("%+v", *v)
}

// eliminate unused error
var _ = log.Logger
var _ = fmt.Sprintf("")
var _ = time.Now()
var _ = json.RawMessage{}
var _ = sha256.Sum256(nil)
var _ = hex.EncodeToString(nil)
var _ = sync.WaitGroup{}
