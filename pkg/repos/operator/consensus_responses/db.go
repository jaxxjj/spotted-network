// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v2.3.0-wicked-fork

package consensus_responses

import (
	"github.com/stumble/dcache"
	"github.com/stumble/wpgx"
)

// BeforeDump allows you to edit result before dump.
type BeforeDump func(m *ConsensusResponse)

type CacheQuerierConn interface {
	GetCache() *dcache.DCache
	GetConn() wpgx.WQuerier
}

type CacheWGConn interface {
	GetCache() *dcache.DCache
	GetConn() wpgx.WGConn
}

func New(db wpgx.WGConn, cache *dcache.DCache) *Queries {
	return &Queries{db: db, cache: cache}
}

type Queries struct {
	db    wpgx.WGConn
	cache *dcache.DCache
}

var _ CacheWGConn = (*Queries)(nil)

func (q *Queries) GetCache() *dcache.DCache {
	return q.cache
}

func (q *Queries) GetConn() wpgx.WGConn {
	return q.db
}

func (q *Queries) AsReadOnly() *ReadOnlyQueries {
	return &ReadOnlyQueries{
		db:    q.db,
		cache: q.cache,
	}
}

func (q *Queries) WithTx(tx *wpgx.WTx) *Queries {
	return &Queries{
		db:    tx,
		cache: q.cache,
	}
}

func (q *Queries) WithCache(cache *dcache.DCache) *Queries {
	return &Queries{
		db:    q.db,
		cache: cache,
	}
}

func (q *Queries) UseReplica(replicaQuerier wpgx.WQuerier) *ReadOnlyQueries {
	return &ReadOnlyQueries{
		db:    replicaQuerier,
		cache: q.cache,
	}
}

type ReadOnlyQueries struct {
	db    wpgx.WQuerier
	cache *dcache.DCache
}

var _ CacheQuerierConn = (*ReadOnlyQueries)(nil)

func (q *ReadOnlyQueries) WithCache(cache *dcache.DCache) *ReadOnlyQueries {
	return &ReadOnlyQueries{
		db:    q.db,
		cache: cache,
	}
}

func (q *ReadOnlyQueries) GetCache() *dcache.DCache {
	return q.cache
}

func (q *ReadOnlyQueries) GetConn() wpgx.WQuerier {
	return q.db
}

var Schema = `
-- Schema for consensus_responses table stores aggregated consensus results for tasks
CREATE TABLE IF NOT EXISTS consensus_responses (
    id BIGSERIAL PRIMARY KEY,                    -- Auto-incrementing unique identifier
    task_id VARCHAR(66) NOT NULL,                -- Task hash identifier
    epoch INT4 NOT NULL,                         -- Consensus epoch number
    value NUMERIC NOT NULL,                      -- Consensus value
    key NUMERIC NOT NULL,                        -- Consensus key
    total_weight NUMERIC NOT NULL,               -- Total weight of participating operators
    chain_id INT4 NOT NULL,                      -- Chain identifier
    block_number BIGINT NOT NULL,                -- Block number at consensus
    target_address VARCHAR(42) NOT NULL,         -- Target contract address
    aggregated_signatures BYTEA,                 -- Combined signatures of operators
    operator_signatures JSONB,                   -- Individual operator signatures
    consensus_reached_at TIMESTAMPTZ,            -- When consensus was achieved
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    
    CONSTRAINT unique_task_consensus UNIQUE (task_id),
    CONSTRAINT unique_consensus_request UNIQUE (target_address, chain_id, block_number, key)
);

CREATE INDEX IF NOT EXISTS idx_consensus_responses_epoch ON consensus_responses(epoch);
CREATE INDEX IF NOT EXISTS idx_consensus_responses_chain_block ON consensus_responses(chain_id, block_number);
CREATE INDEX IF NOT EXISTS idx_consensus_responses_target ON consensus_responses(target_address);
CREATE INDEX IF NOT EXISTS idx_consensus_responses_created_at ON consensus_responses(created_at); 
`
