// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v2.3.0-wicked-fork

package blacklist

import (
	"github.com/stumble/dcache"
	"github.com/stumble/wpgx"
)

// BeforeDump allows you to edit result before dump.
type BeforeDump func(m *Blacklist)

type CacheQuerierConn interface {
	GetCache() *dcache.DCache
	GetConn() wpgx.WQuerier
}

type CacheWGConn interface {
	GetCache() *dcache.DCache
	GetConn() wpgx.WGConn
}

func New(db wpgx.WGConn, cache *dcache.DCache) *Queries {
	return &Queries{db: db, cache: cache}
}

type Queries struct {
	db    wpgx.WGConn
	cache *dcache.DCache
}

var _ CacheWGConn = (*Queries)(nil)

func (q *Queries) GetCache() *dcache.DCache {
	return q.cache
}

func (q *Queries) GetConn() wpgx.WGConn {
	return q.db
}

func (q *Queries) AsReadOnly() *ReadOnlyQueries {
	return &ReadOnlyQueries{
		db:    q.db,
		cache: q.cache,
	}
}

func (q *Queries) WithTx(tx *wpgx.WTx) *Queries {
	return &Queries{
		db:    tx,
		cache: q.cache,
	}
}

func (q *Queries) WithCache(cache *dcache.DCache) *Queries {
	return &Queries{
		db:    q.db,
		cache: cache,
	}
}

func (q *Queries) UseReplica(replicaQuerier wpgx.WQuerier) *ReadOnlyQueries {
	return &ReadOnlyQueries{
		db:    replicaQuerier,
		cache: q.cache,
	}
}

type ReadOnlyQueries struct {
	db    wpgx.WQuerier
	cache *dcache.DCache
}

var _ CacheQuerierConn = (*ReadOnlyQueries)(nil)

func (q *ReadOnlyQueries) WithCache(cache *dcache.DCache) *ReadOnlyQueries {
	return &ReadOnlyQueries{
		db:    q.db,
		cache: cache,
	}
}

func (q *ReadOnlyQueries) GetCache() *dcache.DCache {
	return q.cache
}

func (q *ReadOnlyQueries) GetConn() wpgx.WQuerier {
	return q.db
}

var Schema = `
CREATE TABLE IF NOT EXISTS blacklist (
    id              BIGSERIAL       PRIMARY KEY,

    peer_id         VARCHAR(255)    NOT NULL,    -- libp2p peer ID
    ip              VARCHAR(45)     NOT NULL,    -- 节点的公网IP
    
    reason          TEXT           NULL,         -- 封禁原因
    created_at      TIMESTAMPTZ    NOT NULL DEFAULT NOW(),
    expires_at      TIMESTAMPTZ    NULL CHECK (expires_at > created_at),

    CONSTRAINT valid_peer_id CHECK (
        peer_id ~ '^12D3KooW[1-9A-HJ-NP-Za-km-z]{44,48}$'  -- libp2p peer ID
    ),
    CONSTRAINT valid_ip CHECK (
        ip ~ '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$' OR          -- IPv4
        ip ~ '^[0-9a-fA-F:]+$'                             -- IPv6
    ),

    CONSTRAINT unique_peer_ip UNIQUE (peer_id, ip)
);

-- index
CREATE INDEX IF NOT EXISTS blacklist_peer_id_idx ON blacklist(peer_id);
CREATE INDEX IF NOT EXISTS blacklist_ip_idx ON blacklist(ip);
CREATE INDEX IF NOT EXISTS blacklist_created_at_idx ON blacklist(created_at);
CREATE INDEX IF NOT EXISTS blacklist_expires_at_idx ON blacklist(expires_at);

`
