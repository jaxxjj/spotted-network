// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v2.3.0-wicked-fork

package consensus_responses

import (
	"github.com/stumble/dcache"
	"github.com/stumble/wpgx"
)

// BeforeDump allows you to edit result before dump.
type BeforeDump func(m *ConsensusResponse)

type CacheQuerierConn interface {
	GetCache() *dcache.DCache
	GetConn() wpgx.WQuerier
}

type CacheWGConn interface {
	GetCache() *dcache.DCache
	GetConn() wpgx.WGConn
}

func New(db wpgx.WGConn, cache *dcache.DCache) *Queries {
	return &Queries{db: db, cache: cache}
}

type Queries struct {
	db    wpgx.WGConn
	cache *dcache.DCache
}

var _ CacheWGConn = (*Queries)(nil)

func (q *Queries) GetCache() *dcache.DCache {
	return q.cache
}

func (q *Queries) GetConn() wpgx.WGConn {
	return q.db
}

func (q *Queries) AsReadOnly() *ReadOnlyQueries {
	return &ReadOnlyQueries{
		db:    q.db,
		cache: q.cache,
	}
}

func (q *Queries) WithTx(tx *wpgx.WTx) *Queries {
	return &Queries{
		db:    tx,
		cache: q.cache,
	}
}

func (q *Queries) WithCache(cache *dcache.DCache) *Queries {
	return &Queries{
		db:    q.db,
		cache: cache,
	}
}

func (q *Queries) UseReplica(replicaQuerier wpgx.WQuerier) *ReadOnlyQueries {
	return &ReadOnlyQueries{
		db:    replicaQuerier,
		cache: q.cache,
	}
}

type ReadOnlyQueries struct {
	db    wpgx.WQuerier
	cache *dcache.DCache
}

var _ CacheQuerierConn = (*ReadOnlyQueries)(nil)

func (q *ReadOnlyQueries) WithCache(cache *dcache.DCache) *ReadOnlyQueries {
	return &ReadOnlyQueries{
		db:    q.db,
		cache: cache,
	}
}

func (q *ReadOnlyQueries) GetCache() *dcache.DCache {
	return q.cache
}

func (q *ReadOnlyQueries) GetConn() wpgx.WQuerier {
	return q.db
}

var Schema = `
CREATE TABLE IF NOT EXISTS consensus_responses (
    task_id VARCHAR(66) PRIMARY KEY,                
    epoch INT4 NOT NULL,
    chain_id INT4 NOT NULL,
    target_address VARCHAR(42) NOT NULL,
    block_number BIGINT NOT NULL,        
    key NUMERIC NOT NULL,                        
    value NUMERIC NOT NULL,                                                                                        
    aggregated_signatures BYTEA,                                        
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    
    CONSTRAINT unique_consensus_request UNIQUE (target_address, chain_id, block_number, key)
);

CREATE INDEX IF NOT EXISTS idx_consensus_responses_epoch ON consensus_responses(epoch);
CREATE INDEX IF NOT EXISTS idx_consensus_responses_chain_block ON consensus_responses(chain_id, target_address, key, block_number);
`
