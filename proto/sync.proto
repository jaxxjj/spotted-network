syntax = "proto3";

package proto;

option go_package = "github.com/galxe/spotted-network/proto";

// StateVerifyMessage is sent by operator to verify its state hash with registry
message StateVerifyMessage {
    // Current merkle root hash of operator's state
    bytes state_root = 1;
}

// StateVerifyResponse is sent by registry in response to state verification
message StateVerifyResponse {
    // Whether the state hash matches
    bool success = 1;
    // Human readable message
    string message = 2;
    // Full state if verification fails (empty if verification succeeds)
    repeated OperatorPeerState operators = 3;
}

// Base state message that combines peer and business information
message OperatorPeerState {
    // Peer information (essential for connection)
    string peer_id = 1;
    repeated string multiaddrs = 2;

    // Core business state (essential for operation)
    string address = 3;
    string signing_key = 4;
    string weight = 5;
}

// Full state sync message (periodic or on-demand)
// Used for:
// 1. GetFullState responses
// 2. Epoch updates
// 3. response to StateHashRequest (when hash doesn't match)
message FullStateSync {
    repeated OperatorPeerState operators = 1;
    optional uint64 epoch = 2;  // current epoch number if this is an epoch update
}

// 4. State changes (join/leave/update)
message OperatorUpdate {
    repeated OperatorPeerState operators = 1;
}

// Subscribe response
message SubscribeResponse {
    bool success = 1;
    string message = 2;
}


message StateHashResponse {
    string state_hash = 1;
    bool hash_matched = 2;  // whether the hash matches registry's state
    optional FullStateSync full_state = 3;  // provided when hash doesn't match
}
